I) Git
1. Undo actions
- Thay đổi commit massage:
git  commit --amend 
+ i: vào chế độ insert 
+ esc: thoát chế đôj insert
+ :wq: write and quit 
- Chuyển từ vùng Staging -> Working: 
git restore --staged <ten_file>
- Chuyển từ vùng Repo --> Working:
git reset HEAD~1 (roll back số commit mới nhất)

2. Branching model
- Tạo nhánh mới: git btanch <ten_branch>
- Chuyển đến nhánh: git checkout <ten_branch>
- Tạo và chuyển đến nhánh đó: git checkout b <ten_branch>
- Bỏ qua các file/ folder không cần git theo dõi
+ (1) Tạo file '.gitignore'
+ (2) Thêm tên file / folder vào file '.gitignore'

II) Javascript basic
1. Logical operator
- Conventions:
    + snake_case: dùng gạch dưới
    + kebab-case: tên file
    + camelCase: tên biến
    + PascalCase: tên class

2. Object and array
* Object = Đối tượng:
- Khai báo:
let/const <ten_object> = {
<thuoc_tinh>: <gia_tri>
...
}
- Sử dụng:
    + console.log("name = " + <object>.<thuoc_tinh>);
    + console.log(“price = “,<object>[“<thuoc_tinh>”]);
- Gán lại: 
    + user.age = 28
    + product[“manufacturer”][“year”] = 2025
- Thêm thuộc tính mới: dùng dấu . hoặc ngoặc vuông [] để định nghĩa thuộc tính mới.
    + bike.color = “Blue”;
    + bike[“price new”] = 100;
- Xoá thuộc tính của Object: dùng delete
    + delete employee.age;

* Array
- Khai báo mảng: let arr = [];
- Độ dài mảng: arr.length 
- In ra giá trị của mảng tại 1 vị trí: arr[1]

3. Logical operator
- && : cả 2 vế của mệnh đề đều đúng
- || : một trong 2 vế đúng
- ! : đảo ngược lại giá trị của mệnh đề
- == : So sánh lỏng lẻo. Chỉ so sánh giá trị 
- === : So sánh tuyệt đối. So sánh giá trị và kiểu giá trị 
- != && !== : Đảo ngược giá trị mệnh đề 

4.Function
- Khai báo: 
    function <nameFunction>() {
    // code
}
- Sử dụng:
    <nameFunction>();

5. Phạm vi của biến
- var: 
    + Phạm vi hàm (function scope) hoặc phạm vi toàn cục (global scope)
    + Có thể gán lại và có thể khai báo lại 
- let:
    + Phạm vi khối (Block scope)
    + Có thể gán lại nhưng không thể khai báo lại

6. Điều kiện nâng cao
- if...else
    + Cấu trúc:
if(điều kiện) {
    hành động 1
} else {
    hành động 2
}
-> Điều kiện đúng thì thực hiện hành động 1, ngược lại, nếu điều kiện sai thì thực hiện hành động 2

- if...else if
    + Cấu trúc:
if (điều kiện 1) {
    hành động 1
} else if (điều kiện 2) {
    hành động 2
} else {
    hành động 3
}
--> Nếu điều kiện 1 đúng thì thực hiện hành động 1, ngược lại, điều kiện 1 sai (false) thì thực hiện kiểm tra điều kiện 2
    Nếu điều kiện 2 đúng thì thực hiện hành động 2, ngược lại, điều kiện 2 sai thì thực hiện hành động 3

- switch...case: sẽ kiểm tra kết quả của 1 điều kiện và dựa vào kết quả đó để thực hiện các hành động tương ứng.
    + Cấu trúc:
switch (biểu_thức) {
	case giá_trị_1:
		Lệnh 1;
		break;
	case giá_trị_2:
		Lệnh 2;
		break;
	...
	case giá_trị_n:
		Lệnh n;
		break;
	default:
        Lệnh 0;
}

7. Vòng lặp nâng cao
- break: Thoát khỏi vòng lặp
- continue: Bỏ qua vòng lặp
- push: Để thêm phần tử vào mảng
    const arr = [1,2];
    arr.push(3);

* Vòng lặp for...in: dùng để lặp các thuộc tính của object.
let product = {
'Banana': 20,
'Apple': 30,
'Orange': 15
};
for (let property in product) {
console.log(property);

}
// Kết quả in ra:
Banana
Apple
Orange

* Vòng lặp for...of: dùng để duyệt qua từng giá trị của các đối tượng có thể lặp
const array = [1, 2, 3, 4];
for (let value of array) {
  console.log(value);
}
kq: 1 2 3 4


